"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import {
  VocabularyManager,
  VocabularyCard,
} from "../../../data/language-learning/vocabulary";

export default function VocabularyStudyPage() {
  const searchParams = useSearchParams();
  const dayParam = searchParams.get("day");
  const weekParam = searchParams.get("week");

  const [currentDay, setCurrentDay] = useState(1);
  const [currentWeek, setCurrentWeek] = useState(1);
  const [dailyWords, setDailyWords] = useState<VocabularyCard[]>([]);
  const [studyMode, setStudyMode] = useState<"grid" | "single">("grid");
  const [selectedCard, setSelectedCard] = useState<VocabularyCard | null>(null);
  const [completedWords, setCompletedWords] = useState<string[]>([]);
  const [overallProgress, setOverallProgress] = useState({
    total: 0,
    learned: 0,
    confused: 0,
    notStudied: 0,
    learningPercentage: 0,
    confusedPercentage: 0,
  });

  useEffect(() => {
    if (dayParam) setCurrentDay(parseInt(dayParam));
    if (weekParam) setCurrentWeek(parseInt(weekParam));
  }, [dayParam, weekParam]);

  useEffect(() => {
    // Get words for current day
    const globalDay =
      weekParam && dayParam
        ? (parseInt(weekParam) - 1) * 7 + (parseInt(dayParam) - 1) + 1
        : currentDay;

    const words = VocabularyManager.getDailyWords(globalDay);
    setDailyWords(words);
  }, [currentDay, currentWeek, dayParam, weekParam]);

  useEffect(() => {
    // Update overall progress when component mounts or when daily words change
    const progress = VocabularyManager.getOverallProgress();
    setOverallProgress(progress);
  }, [dailyWords]);

  const handleCardClick = (card: VocabularyCard) => {
    setSelectedCard(card);
    setStudyMode("single");
  };

  const handleMarkAsLearned = (wordId: string) => {
    VocabularyManager.markAsLearned(wordId);
    setCompletedWords([...completedWords, wordId]);
    // Update the current word in state
    setDailyWords((prevWords) =>
      prevWords.map((word) =>
        word.id === wordId ? { ...word, learned: true } : word
      )
    );
    // Update overall progress
    const progress = VocabularyManager.getOverallProgress();
    setOverallProgress(progress);
  };

  const handleMarkAsIncorrect = (wordId: string) => {
    VocabularyManager.markAsIncorrect(wordId);
    // Update the current word in state
    setDailyWords((prevWords) =>
      prevWords.map((word) =>
        word.id === wordId ? { ...word, confused: true, learned: false } : word
      )
    );
    // Update overall progress
    const progress = VocabularyManager.getOverallProgress();
    setOverallProgress(progress);
  };

  const handleBackToGrid = () => {
    setStudyMode("grid");
    setSelectedCard(null);
  };

  const learnedCount = dailyWords.filter((word) => word.learned).length;
  const confusedCount = dailyWords.filter((word) => word.confused).length;

  if (dailyWords.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <div className="text-gray-600 dark:text-gray-300">
            Loading vocabulary cards...
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <Link
            href="/language-learning"
            className="inline-flex items-center text-purple-600 hover:text-purple-700 mb-4"
          >
            <svg
              className="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            Back to Learning Plan
          </Link>

          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-2">
            Daily Vocabulary Study
          </h1>
          <div className="text-gray-600 dark:text-gray-300">
            Day{" "}
            {weekParam && dayParam
              ? (parseInt(weekParam) - 1) * 7 + parseInt(dayParam)
              : currentDay}{" "}
            â€¢ {dailyWords.length} words
          </div>
        </div>

        {/* Overall Progress Summary */}
        <div className="max-w-6xl mx-auto mb-8">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              Overall Progress
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                  {overallProgress.total}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Total Words
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                  {overallProgress.learned}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Learned ({overallProgress.learningPercentage}%)
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">
                  {overallProgress.confused}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Confused ({overallProgress.confusedPercentage}%)
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-600 dark:text-gray-400">
                  {overallProgress.notStudied}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Not Studied
                </div>
              </div>
            </div>
            <div className="mt-4 w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700 relative">
              <div
                className="bg-green-500 h-2 rounded-full transition-all duration-300 absolute"
                style={{ width: `${overallProgress.learningPercentage}%` }}
              ></div>
              <div
                className="bg-yellow-500 h-2 rounded-full transition-all duration-300 absolute"
                style={{
                  width: `${overallProgress.confusedPercentage}%`,
                  left: `${overallProgress.learningPercentage}%`,
                }}
              ></div>
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="max-w-6xl mx-auto mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm text-gray-600 dark:text-gray-400">
              Progress: {learnedCount} / {dailyWords.length} words learned
            </span>
            <span className="text-sm text-green-600 dark:text-green-400">
              {Math.round((learnedCount / dailyWords.length) * 100)}% Complete
            </span>
          </div>
          <div className="flex justify-between items-center mb-3">
            <span className="text-sm text-yellow-600 dark:text-yellow-400">
              Confused: {confusedCount} words
            </span>
            <span className="text-sm text-gray-500 dark:text-gray-400">
              Remaining: {dailyWords.length - learnedCount - confusedCount}{" "}
              words
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700 relative">
            {/* Learned progress */}
            <div
              className="bg-green-500 h-2 rounded-full transition-all duration-300 absolute"
              style={{ width: `${(learnedCount / dailyWords.length) * 100}%` }}
            ></div>
            {/* Confused progress */}
            <div
              className="bg-yellow-500 h-2 rounded-full transition-all duration-300 absolute"
              style={{
                width: `${(confusedCount / dailyWords.length) * 100}%`,
                left: `${(learnedCount / dailyWords.length) * 100}%`,
              }}
            ></div>
          </div>
          {/* Progress Legend */}
          <div className="flex justify-center space-x-6 mt-3">
            <div className="flex items-center">
              <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">
                Learned
              </span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">
                Confused
              </span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 bg-gray-300 rounded-full mr-2"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">
                Not Studied
              </span>
            </div>
          </div>
        </div>

        {/* Study Mode Toggle */}
        <div className="max-w-6xl mx-auto mb-8">
          <div className="flex justify-center space-x-4">
            <button
              onClick={() => setStudyMode("grid")}
              className={`px-6 py-3 rounded-lg font-medium transition-colors ${
                studyMode === "grid"
                  ? "bg-purple-600 text-white"
                  : "bg-white text-purple-600 border border-purple-600"
              }`}
            >
              Grid View
            </button>
            <button
              onClick={() => setStudyMode("single")}
              className={`px-6 py-3 rounded-lg font-medium transition-colors ${
                studyMode === "single"
                  ? "bg-purple-600 text-white"
                  : "bg-white text-purple-600 border border-purple-600"
              }`}
            >
              Single Card
            </button>
          </div>
        </div>

        {/* Grid Mode - Show all cards */}
        {studyMode === "grid" && (
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
              {dailyWords.map((word) => (
                <div
                  key={word.id}
                  className={`vocab-card cursor-pointer transform transition-all duration-300 hover:scale-105 ${
                    word.learned
                      ? "opacity-60"
                      : word.confused
                      ? "opacity-80"
                      : ""
                  }`}
                  onClick={() => handleCardClick(word)}
                >
                  {/* Card Front */}
                  <div
                    className={`playing-card bg-white dark:bg-gray-800 shadow-lg border-2 relative overflow-hidden ${
                      word.learned
                        ? "border-green-200 dark:border-green-600"
                        : word.confused
                        ? "border-yellow-200 dark:border-yellow-600"
                        : "border-purple-200 dark:border-purple-600"
                    }`}
                  >
                    {/* Card Header */}
                    <div
                      className={`absolute top-0 left-0 right-0 text-white p-3 ${
                        word.learned
                          ? "bg-gradient-to-r from-green-500 to-emerald-600"
                          : word.confused
                          ? "bg-gradient-to-r from-yellow-500 to-orange-600"
                          : "bg-gradient-to-r from-purple-500 to-indigo-600"
                      }`}
                    >
                      <div className="flex justify-between items-center">
                        <span className="text-xs font-medium">
                          {word.level}
                        </span>
                        <span className="text-xs">{word.partOfSpeech}</span>
                      </div>
                    </div>

                    {/* Card Content */}
                    <div className="flex flex-col items-center justify-center h-full pt-16 pb-8 px-4 text-center">
                      <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-3">
                        {word.word}
                      </h3>
                      <div className="text-gray-600 dark:text-gray-400 text-sm mb-4">
                        {word.phonetic || ""}
                      </div>
                      <div className="text-xs text-gray-500 dark:text-gray-400 mb-4">
                        Click to study
                      </div>
                    </div>

                    {/* Card Footer */}
                    <div className="absolute bottom-0 left-0 right-0 p-3">
                      <div className="flex justify-between items-center">
                        <div className="flex space-x-1">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleMarkAsIncorrect(word.id);
                            }}
                            className="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600 transition-colors"
                          >
                            Hard
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleMarkAsLearned(word.id);
                            }}
                            className="bg-green-500 text-white px-2 py-1 rounded text-xs hover:bg-green-600 transition-colors"
                          >
                            Easy
                          </button>
                        </div>
                        {word.learned && (
                          <div className="text-green-500">
                            <svg
                              className="w-4 h-4"
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path
                                fillRule="evenodd"
                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                clipRule="evenodd"
                              />
                            </svg>
                          </div>
                        )}
                        {word.confused && !word.learned && (
                          <div className="text-yellow-500">
                            <svg
                              className="w-4 h-4"
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path
                                fillRule="evenodd"
                                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                                clipRule="evenodd"
                              />
                            </svg>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Single Card Mode */}
        {studyMode === "single" && selectedCard && (
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <button
                onClick={handleBackToGrid}
                className="inline-flex items-center text-purple-600 hover:text-purple-700 mb-4"
              >
                <svg
                  className="w-5 h-5 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M15 19l-7-7 7-7"
                  />
                </svg>
                Back to Grid
              </button>
            </div>

            <div className="flex justify-center">
              <div className="playing-card bg-white dark:bg-gray-800 shadow-2xl border-2 border-purple-200 dark:border-purple-600 mx-auto">
                {/* Card Header */}
                <div className="bg-gradient-to-r from-purple-500 to-indigo-600 text-white p-4 rounded-t-lg">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">
                      {selectedCard.level}
                    </span>
                    <span className="text-sm">{selectedCard.partOfSpeech}</span>
                  </div>
                </div>

                {/* Card Content */}
                <div className="p-8">
                  <div className="text-center mb-6">
                    <h2 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
                      {selectedCard.word}
                    </h2>
                    <div className="text-gray-600 dark:text-gray-400 text-lg mb-6">
                      {selectedCard.phonetic || ""}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                        Definition:
                      </h3>
                      <div className="text-gray-700 dark:text-gray-300">
                        {selectedCard.definition}
                      </div>
                    </div>

                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                        Examples:
                      </h3>
                      <ul className="space-y-2">
                        {selectedCard.examples.map((example, index) => (
                          <li
                            key={index}
                            className="text-gray-700 dark:text-gray-300 italic"
                          >
                            â€¢ {example}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>

                  <div className="flex space-x-3 mt-8">
                    <button
                      onClick={() => handleMarkAsIncorrect(selectedCard.id)}
                      className="flex-1 bg-red-500 text-white px-6 py-3 rounded-lg hover:bg-red-600 transition-colors font-medium"
                    >
                      Mark as Hard
                    </button>
                    <button
                      onClick={() => handleMarkAsLearned(selectedCard.id)}
                      className="flex-1 bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 transition-colors font-medium"
                    >
                      Mark as Learned
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Completion Message */}
        {learnedCount === dailyWords.length && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-8 max-w-md text-center">
              <div className="text-6xl mb-4">ðŸŽ‰</div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                Congratulations!
              </h2>
              <div className="text-gray-600 dark:text-gray-300 mb-6">
                You've completed all {dailyWords.length} words for today!
              </div>
              <Link
                href="/language-learning"
                className="inline-block bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors"
              >
                Back to Learning Plan
              </Link>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
